@app.route("/district_int")
def district_intersections():
    id = request.args.get("boundid")
    namecol = request.args.get("featureid")

    if not id or not namecol:
        return jsonify({"error": "boundid and featureid are required"}), 400

    conn = pg_pool.getconn()
    try:
        with conn.cursor() as cur:
            cur.execute("""
            SELECT 
                id_right AS id, 
                namecol_right AS namecol, 
                namealt_right AS namealt, 
                ST_AsGeoJSON(geom),
                intersection_pct
            FROM all_intersections
            WHERE id_left = %s AND namecol_left = %s
            """, (id, namecol))

            rows = cur.fetchall()
        if not rows:
            return jsonify({"error": "No boundaries found"}), 404

        features = []
        for row in rows:
                feature = {
                    "type": "Feature",
                    "geometry": json.loads(row[3]),
                    "properties": {
                        "id": row[0],
                        "namecol": row[1],
                        "namealt": row[2],
                        "intersection_pct": float(row[4]) if row[4] is not None else None
                    }
                }
                features.append(feature)

        return jsonify({
            "type": "FeatureCollection",
            "features": features
        })
    finally:
        pg_pool.putconn(conn) 